{"version":3,"sources":["components/addCategory/AddCategory.jsx","helpers/getGifs.js","components/GifGrid/GifGridItem/GifGridItem.jsx","components/GifGrid/GifGridItem/logo.svg","components/GifGrid/GiGrid.jsx","hooks/useFetchGifs.js","components/GifApp/GifApp.jsx","App.js","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setinputvalue","onSubmit","e","preventDefault","trim","length","re","value","className","type","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GiGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","logo","Gifapp","categories","setcategory","App","ReactDOM","render","document","getElementById"],"mappings":"yTAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAgBrC,OACI,mCACE,sBAAMC,SAVS,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAACS,GAAD,OAAOP,GAAP,mBAAqBO,OACnCN,EAAc,MAMhB,SACE,uBACAO,MAAOR,EACPS,UAAU,eACVC,KAAK,OACLC,SApBkB,SAACR,GAEvBF,EAAcE,EAAES,OAAOJ,e,uBCPlBK,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,0FAEmEC,UAAUH,GAF7E,sBAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIKA,EAAKC,OAJV,uBAIVC,EAJU,EAIVA,KACRC,QAAQC,IAAI,CAACF,SACPG,EAAOH,EAAKI,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAVpB,kBAcXQ,GAdW,4CAAH,sDCCNO,G,MAAc,SAAC,GAAa,IAAXL,EAAU,EAAVA,IAE5B,OACE,sBAAKjB,UAAU,yCAAf,UACE,qBAAKuB,IAAKN,EAAIV,IAAKiB,IAAKP,EAAIE,QAC5B,4BAAIF,EAAIE,aCPC,G,MAAA,IAA0B,kCCiC1BM,EA3BA,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECJL,SAAEA,GAAe,IAAD,EAChBf,mBAAS,CACjCsB,KAAM,GACNc,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAyB1C,OAnBAC,qBAAU,WACRzB,EAAOC,GACNyB,MAAK,SAAAC,GACFC,YAAW,WACPnB,QAAQC,IAAIiB,GACZH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,MAEd,UAEL,CAACrB,IAQGsB,EDlBqBM,CAAa5B,GAA7Be,EAHmB,EAGxBR,KAAYc,EAHY,EAGZA,QAUnB,OACE,qCAEE,oBAAI1B,UAAU,oCAAd,SAAmDK,IACnD,mBAAGL,UAAU,mCAAb,SAAiD0B,EAAQ,qBAAKH,IAAKW,EAAMV,IAAI,WAAW,kBACxF,qBAAKxB,UAAU,YAAf,SACGoB,EAAOJ,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,CAA0BA,IAAKA,GAAbA,EAAIC,aEIxBiB,EAzBF,WAAI,MAEqB7C,mBAAS,CAAC,cAF/B,mBAEN8C,EAFM,KAEMC,EAFN,KAOb,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAahD,cAAegD,IAE5B,6BACID,EAAWpB,KAAI,SAAAX,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCVTiC,MARf,WACE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNuC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.e185f70c.chunk.js","sourcesContent":["import React,{useState}  from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport './AddCategory.css';\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputvalue, setinputvalue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setinputvalue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputvalue.trim().length>2){\r\n            setCategories((re)=>[inputvalue,...re]);\r\n            setinputvalue('')\r\n        }\r\n        // console.log('submit hecho');\r\n    }\r\n    return (\r\n        <>\r\n          <form onSubmit={handleSubmit}>\r\n            <input \r\n            value={inputvalue}\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            onChange={handleInputChange}/>  \r\n          </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\nexport default AddCategory;\r\n","//La función getGif devuelve una promesa \r\nexport const getGif = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?api_key=ztgbVlNjcEmzOwmWpxp43ePQT1hSNAyQ&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    console.log({data})\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    // console.log(gifs);\r\n    return gifs;\r\n  };","import React from \"react\";\r\nimport \"../GifGridItem/GifGridItem.css\";\r\nexport const GifGridItem = ({ img }) => {\r\n  // console.log(img);\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={img.url} alt={img.title} />\r\n      <p>{img.title}</p>\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.7f937069.svg\";","import React, { Fragment } from \"react\";\r\nimport { getGif } from \"../../helpers/getGifs\";\r\nimport { useFetchGifs } from \"../../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem/GifGridItem\";\r\nimport \"./GiGrid.css\";\r\nimport logo from './GifGridItem/logo.svg';\r\nconst GiGrid = ({ category }) => {\r\n\r\n  // const [images, setimages] = useState([]);\r\n  const {data:images,loading}=useFetchGifs(category);\r\n  \r\n  // useEffect(() => {\r\n  //   getGif(category)//recibo una promesa y envio la category\r\n  //   .then(setimages)//resuelve la promesa y le doy el nuevo valor a setimages\r\n  // }, [category]);\r\n\r\n \r\n  // getGif();\r\n\r\n  return (\r\n    <>\r\n    \r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      <p className=\"animate__animated animate__flash\">{loading?<img src={logo} alt=\"imagen\"/>:'DATA CARAGADA'}</p>\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => {\r\n          return <GifGridItem key={img.id} img={img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GiGrid;\r\n","import { useState,useEffect } from \"react\";\r\nimport { getGif } from \"../helpers/getGifs\";\r\nexport const useFetchGifs = ( category ) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGif(category)\r\n    .then(imgs=>{\r\n        setTimeout(()=>{\r\n            console.log(imgs)\r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            });\r\n        },1000)\r\n    })    \r\n  }, [category])\r\n\r\n//   setTimeout(() => {\r\n//     setstate({\r\n//       data: [1,2,3,4,5],\r\n//       loading: false,\r\n//     });\r\n//   }, 3000);\r\n  return state; //{data[],loading:true}\r\n};\r\n","import React,{useState} from 'react';\r\nimport './GifApp.css';\r\nimport AddCategory from '../addCategory/AddCategory';\r\nimport GiGrid from '../GifGrid/GiGrid';\r\n\r\nconst Gifapp=()=>{\r\n    // const categorias=['One ´Punch','Dragon Ball','Samurai X'];\r\n    const [categories, setcategory] = useState(['One Punch']);\r\n    // const handleAdd = () => {\r\n    //     const array=[...categories,'HunterxHunter','Timoteo','los padrinos mágicos']\r\n    //     setcategory(array);\r\n    // }\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            <AddCategory setCategories={setcategory}/>\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n               {categories.map(category=>(\r\n                   <GiGrid\r\n                   key={category}\r\n                   category={category}/>\r\n                   ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Gifapp;","import './App.css';\nimport GifApp from './components/GifApp/GifApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GifApp/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);\n\n//GifExpertApp\n//h2"],"sourceRoot":""}